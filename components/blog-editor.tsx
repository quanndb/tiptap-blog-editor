"use client";

import { Button } from "@/components/ui/button";
import { Edit, Eye, Globe, Languages, Plus, Send } from "lucide-react";
import { useState } from "react";
import { BlogPreview } from "./blog-preview";
import { LanguageManager } from "./language-manager";
import { PublishModal } from "./publish-modal";
import { Section } from "./section";

export interface Block {
  id: string;
  type: "text" | "image" | "embed";
  content: any;
}

export interface Column {
  id: string;
  blocks: Block[];
}

export interface SectionData {
  id: string;
  columns: Column[];
}

export interface LanguageVersion {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
  sections: SectionData[];
  isDefault?: boolean;
}

const initialSections: SectionData[] = [
  {
    id: "section-1",
    columns: [
      {
        id: "col-1",
        blocks: [
          {
            id: "block-1",
            type: "text",
            content: {
              html: "<p>V∆∞·ªùn Qu·ªëc gia Du Gi√† l√† m·ªôt kho t√†ng ƒëa d·∫°ng sinh h·ªçc v√¥ c√πng phong ph√∫ v·ªõi 318 lo√†i ƒë·ªông v·∫≠t c√≥ x∆∞∆°ng s·ªëng tr√™n c·∫°n, g·ªìm 72 lo√†i th√∫, 162 lo√†i chim, 84 lo√†i b√≤ s√°t v√† l∆∞·ª°ng c∆∞. ƒê√¢y l√† ng√¥i nh√† c·ªßa nhi·ªÅu lo√†i qu√Ω hi·∫øm, ƒë·∫∑c h·ªØu v√† c√≥ t√™n trong S√°ch ƒê·ªè, ƒë·∫∑c bi·ªát lo√†i Vo·ªçc m≈©i h·∫øch - m·ªôt trong 25 lo√†i linh tr∆∞·ªüng ƒëang b·ªã ƒëe d·ªça tuy·ªát ch·ªßng cao nh·∫•t tr√™n th·∫ø gi·ªõi hi·ªán nay.</p>",
            },
          },
        ],
      },
    ],
  },
  {
    id: "section-1753176792856",
    columns: [
      {
        id: "col-1753176792856",
        blocks: [
          {
            id: "block-1753176801674",
            type: "text",
            content: {
              html: "<h1>01. Vo·ªçc m≈©i h·∫øch</h1><p></p>",
            },
          },
        ],
      },
    ],
  },
  {
    id: "section-1753176887094",
    columns: [
      {
        id: "col-1753176887094",
        blocks: [
          {
            id: "block-1753176915774",
            type: "text",
            content: {
              html: "<p><strong>T√™n khoa h·ªçc: Rhinopithecus avunculus</strong></p><p></p><p>Vo·ªçc m≈©i h·∫øch, m·ªôt lo√†i linh tr∆∞·ªüng ƒë·∫∑c bi·ªát, s·ªëng ch·ªß y·∫øu ·ªü tr√™n c√¢y t·∫°i v√πng n√∫i cao r·ª´ng nhi·ªát ƒë·ªõi. V∆∞·ªùn Qu·ªëc gia Du Gi√† l√† m√¥i tr∆∞·ªùng l√Ω t∆∞·ªüng c·ªßa ch√∫ng, v√† chi·∫øc m≈©i h·∫øch ƒë·∫∑c tr∆∞ng ƒë√£ l√†m cho ch√∫ng tr·ªü th√†nh bi·ªÉu t∆∞·ª£ng c·ªßa khu r·ª´ng nhi·ªát ƒë·ªõi. Ch√∫ng th∆∞·ªùng t·∫≠p trung th√†nh b·∫ßy ƒë√†n v√† chia th√†nh c√°c nh√≥m nh·ªè d∆∞·ªõi s·ª± l√£nh ƒë·∫°o c·ªßa m·ªôt con ƒë·ª±c tr∆∞·ªüng th√†nh.Start writing...</p>",
            },
          },
        ],
      },
      {
        id: "col-1753176894569",
        blocks: [
          {
            id: "block-1753176941060",
            type: "image",
            content: {
              src: "https://firebasestorage.googleapis.com/v0/b/introduction-national-forests.appspot.com/o/national_forests%2Fanimal%2F1%2Fd24d27fae238bcb8c3bf690dacd8f608.jpg?alt=media&token=578b970a-8ec1-41d8-820b-868eee40145e",
              alt: "abc",
              caption: "Ngu·ªìn ABC",
            },
          },
        ],
      },
    ],
  },
  {
    id: "section-1753177035890",
    columns: [
      {
        id: "col-1753177035890",
        blocks: [
          {
            id: "block-1753177038504",
            type: "text",
            content: {
              html: "<p>Vo·ªçc m≈©i h·∫øch l√† lo√†i ƒë·∫∑c h·ªØu h·∫πp, ch·ªâ ph√¢n b·ªë ·ªü m·ªôt s·ªë t·ªânh thu·ªôc ƒê√¥ng B·∫Øc Vi·ªát Nam. Hi·ªán t·∫°i, qu·∫ßn th·ªÉ Vo·ªçc m≈©i h·∫øch c√≥ kho·∫£ng 108 - 113 c√° th·ªÉ, chi·∫øm g·∫ßn 50% t·ªïng s·ªë c√° th·ªÉ Vo·ªçc m≈©i h·∫øch hi·ªán nay ·ªü Vi·ªát Nam. Do s·ªë l∆∞·ª£ng gi·∫£m s√∫t ƒë√°ng k·ªÉ, Vo·ªçc m≈©i h·∫øch hi·ªán ƒëang ƒë∆∞·ª£c b·∫£o v·ªá v√† ƒë∆∞a v√†o S√°ch ƒê·ªè. Vi·ªác b·∫£o t·ªìn lo√†i linh tr∆∞·ªüng qu√Ω hi·∫øm n√†y kh√¥ng ch·ªâ g√≥p ph·∫ßn b·∫£o v·ªá ƒëa d·∫°ng sinh h·ªçc m√† c√≤n gi·ªØ g√¨n v·∫ª ƒë·∫πp t·ª± nhi√™n c·ªßa c√°c khu r·ª´ng nhi·ªát ƒë·ªõi.</p>",
            },
          },
        ],
      },
    ],
  },
  {
    id: "section-1753177076369",
    columns: [
      {
        id: "col-1753177076369",
        blocks: [
          {
            id: "block-1753177100181",
            type: "image",
            content: {
              src: "https://firebasestorage.googleapis.com/v0/b/introduction-national-forests.appspot.com/o/national_forests%2Fanimal%2F1%2F247a9324ea8937dd0115c3623023ec4e.jpg?alt=media&token=ae63a778-1397-4a67-9e32-200546c05add",
              alt: "",
              caption: "Ngu·ªìn ABC",
            },
          },
        ],
      },
      {
        id: "col-1753177078541",
        blocks: [
          {
            id: "block-1753177122184",
            type: "image",
            content: {
              src: "https://firebasestorage.googleapis.com/v0/b/introduction-national-forests.appspot.com/o/national_forests%2Fanimal%2F1%2Ffecae71832deef95ea945b0bc790bf7a.jpg?alt=media&token=66f85b18-78d6-4b6e-a360-df179281cf15",
              alt: "",
              caption: "Ngu·ªìn ABC",
            },
          },
        ],
      },
    ],
  },
  {
    id: "section-1753177994908",
    columns: [
      {
        id: "col-1753177994908",
        blocks: [
          {
            id: "block-1753177997771",
            type: "embed",
            content: {
              title: "Embed Content",
              iframe:
                '<iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3936.0707847893914!2d105.3626985!3d21.0812013!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x313461542bb47287%3A0xfc1784f698c57611!2zVsaw4budbiBRdeG7kWMgZ2lhIEJhIFbDrA!5e1!3m2!1svi!2s!4v1753178005407!5m2!1svi!2s" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>',
              url: "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3936.0707847893914!2d105.3626985!3d21.0812013!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x313461542bb47287%3A0xfc1784f698c57611!2zVsaw4budbiBRdeG7kWMgZ2lhIEJhIFbDrA!5e1!3m2!1svi!2s!4v1753178005407!5m2!1svi!2s",
            },
          },
        ],
      },
    ],
  },
];

const defaultLanguages: LanguageVersion[] = [
  {
    code: "en",
    name: "English",
    nativeName: "English",
    flag: "üá∫üá∏",
    sections: initialSections,
    isDefault: true,
  },
];

export function BlogEditor() {
  const [languages, setLanguages] =
    useState<LanguageVersion[]>(defaultLanguages);
  const [currentLanguage, setCurrentLanguage] = useState<string>("en");
  const [previewLanguage, setPreviewLanguage] = useState<string>("en");
  const [isPublishModalOpen, setIsPublishModalOpen] = useState(false);
  const [isPreviewMode, setIsPreviewMode] = useState(false);
  const [showLanguageManager, setShowLanguageManager] = useState(false);

  const getCurrentLanguageData = () => {
    return (
      languages.find((lang) => lang.code === currentLanguage) || languages[0]
    );
  };

  const getPreviewLanguageData = () => {
    return (
      languages.find((lang) => lang.code === previewLanguage) || languages[0]
    );
  };

  const getCurrentSections = () => {
    return getCurrentLanguageData().sections;
  };

  const getPreviewSections = () => {
    return getPreviewLanguageData().sections;
  };

  const addSection = () => {
    const newSection: SectionData = {
      id: `section-${Date.now()}`,
      columns: [
        {
          id: `col-${Date.now()}`,
          blocks: [],
        },
      ],
    };

    setLanguages((prev) =>
      prev.map((lang) =>
        lang.code === currentLanguage
          ? { ...lang, sections: [...lang.sections, newSection] }
          : lang
      )
    );
  };

  const updateSection = (sectionId: string, updatedSection: SectionData) => {
    setLanguages((prev) =>
      prev.map((lang) =>
        lang.code === currentLanguage
          ? {
              ...lang,
              sections: lang.sections.map((section) =>
                section.id === sectionId ? updatedSection : section
              ),
            }
          : lang
      )
    );
  };

  const deleteSection = (sectionId: string) => {
    setLanguages((prev) =>
      prev.map((lang) =>
        lang.code === currentLanguage
          ? {
              ...lang,
              sections: lang.sections.filter(
                (section) => section.id !== sectionId
              ),
            }
          : lang
      )
    );
  };

  const handlePublish = async (metadata: any) => {
    const blogData = {
      ...metadata,
      languages: languages.map((lang) => ({
        ...lang,
        wordCount: calculateWordCount(lang.sections),
      })),
      currentLanguage,
      publishedAt: new Date().toISOString(),
    };

    try {
      const response = await fetch("/api/publish", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(blogData),
      });

      if (response.ok) {
        const result = await response.json();
        alert(`Blog published successfully! ID: ${result.id}`);
        setIsPublishModalOpen(false);
      } else {
        throw new Error("Failed to publish");
      }
    } catch (error) {
      console.error("Publish error:", error);
      alert("Failed to publish blog. Please try again.");
    }
  };

  const calculateWordCount = (sections: SectionData[]) => {
    let wordCount = 0;
    sections.forEach((section) => {
      section.columns.forEach((column) => {
        column.blocks.forEach((block) => {
          if (block.type === "text" && block.content.html) {
            const text = block.content.html.replace(/<[^>]*>/g, "");
            wordCount += text
              .split(/\s+/)
              .filter((word: string) => word.length > 0).length;
          }
        });
      });
    });
    return wordCount;
  };

  const addLanguageVersion = (newLanguage: LanguageVersion) => {
    setLanguages((prev) => [...prev, newLanguage]);
  };

  const updateLanguageVersion = (
    code: string,
    updatedLanguage: LanguageVersion
  ) => {
    setLanguages((prev) =>
      prev.map((lang) => (lang.code === code ? updatedLanguage : lang))
    );
  };

  const deleteLanguageVersion = (code: string) => {
    if (languages.length <= 1) return; // Don't delete the last language

    setLanguages((prev) => prev.filter((lang) => lang.code !== code));

    // Switch to first available language if current is deleted
    if (currentLanguage === code) {
      const remainingLanguages = languages.filter((lang) => lang.code !== code);
      setCurrentLanguage(remainingLanguages[0]?.code || "en");
    }

    // Switch preview language if deleted
    if (previewLanguage === code) {
      const remainingLanguages = languages.filter((lang) => lang.code !== code);
      setPreviewLanguage(remainingLanguages[0]?.code || "en");
    }
  };

  const duplicateToLanguage = (targetLanguageCode: string) => {
    const currentSections = getCurrentSections();
    setLanguages((prev) =>
      prev.map((lang) =>
        lang.code === targetLanguageCode
          ? { ...lang, sections: JSON.parse(JSON.stringify(currentSections)) }
          : lang
      )
    );
  };

  const currentSections = getCurrentSections();
  const currentLangData = getCurrentLanguageData();
  const previewSections = getPreviewSections();
  const previewLangData = getPreviewLanguageData();

  return (
    <div className="max-w-6xl mx-auto bg-white rounded-lg shadow-sm border">
      {/* Tab Navigation */}
      <div className="border-b bg-gray-50 rounded-t-lg">
        <div className="flex items-center justify-between p-4">
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-1">
              <Button
                onClick={() => setIsPreviewMode(false)}
                variant={!isPreviewMode ? "default" : "ghost"}
                size="sm"
                className="flex items-center gap-2"
              >
                <Edit className="w-4 h-4" />
                Editor
              </Button>
              <Button
                onClick={() => setIsPreviewMode(true)}
                variant={isPreviewMode ? "default" : "ghost"}
                size="sm"
                className="flex items-center gap-2"
              >
                <Eye className="w-4 h-4" />
                Preview
              </Button>
            </div>

            {/* Language Selector */}
            <div className="flex items-center gap-2 pl-4 border-l">
              <Globe className="w-4 h-4 text-gray-500" />
              <select
                value={isPreviewMode ? previewLanguage : currentLanguage}
                onChange={(e) => {
                  if (isPreviewMode) {
                    setPreviewLanguage(e.target.value);
                  } else {
                    setCurrentLanguage(e.target.value);
                  }
                }}
                className="px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white"
              >
                {languages.map((lang) => (
                  <option key={lang.code} value={lang.code}>
                    {lang.flag} {lang.name}
                  </option>
                ))}
              </select>
              {!isPreviewMode && (
                <Button
                  onClick={() => setShowLanguageManager(true)}
                  size="sm"
                  variant="outline"
                  className="flex items-center gap-2"
                >
                  <Languages className="w-4 h-4" />
                  Manage Languages
                </Button>
              )}
            </div>
          </div>

          <div className="text-sm text-gray-500">
            {isPreviewMode ? (
              <>
                {previewSections.length} section
                {previewSections.length !== 1 ? "s" : ""} ‚Ä¢{" "}
                {calculateWordCount(previewSections)} words
              </>
            ) : (
              <>
                {currentSections.length} section
                {currentSections.length !== 1 ? "s" : ""} ‚Ä¢{" "}
                {calculateWordCount(currentSections)} words
              </>
            )}
            {languages.length > 1 && (
              <span className="ml-2 px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                {languages.length} languages
              </span>
            )}
          </div>
        </div>
      </div>

      <div className="p-6">
        {isPreviewMode ? (
          <div className="space-y-4">
            {/* Preview Language Indicator */}
            {languages.length > 1 && (
              <div className="flex items-center justify-center p-3 bg-green-50 border border-green-200 rounded-lg">
                <div className="flex items-center gap-2">
                  <span className="text-2xl">{previewLangData.flag}</span>
                  <div className="text-center">
                    <div className="font-medium text-green-900">
                      Previewing: {previewLangData.name} (
                      {previewLangData.nativeName})
                    </div>
                    <div className="text-sm text-green-700">
                      {calculateWordCount(previewSections)} words ‚Ä¢{" "}
                      {previewSections.length} sections
                    </div>
                  </div>
                </div>
              </div>
            )}
            <BlogPreview sections={previewSections} />
          </div>
        ) : (
          <div className="space-y-6">
            {/* Current Language Indicator */}
            {languages.length > 1 && (
              <div className="flex items-center justify-between p-3 bg-blue-50 border border-blue-200 rounded-lg">
                <div className="flex items-center gap-2">
                  <span className="text-2xl">{currentLangData.flag}</span>
                  <div>
                    <div className="font-medium text-blue-900">
                      Editing: {currentLangData.name} (
                      {currentLangData.nativeName})
                    </div>
                    <div className="text-sm text-blue-700">
                      {currentLangData.isDefault && "Default language"} ‚Ä¢{" "}
                      {calculateWordCount(currentSections)} words
                    </div>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  {languages.length > 1 && (
                    <select
                      onChange={(e) => {
                        if (e.target.value) {
                          duplicateToLanguage(e.target.value);
                          alert(
                            `Content copied to ${
                              languages.find((l) => l.code === e.target.value)
                                ?.name
                            }!`
                          );
                        }
                      }}
                      value=""
                      className="px-3 py-1 border border-blue-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white"
                    >
                      <option value="">Copy content to...</option>
                      {languages
                        .filter((lang) => lang.code !== currentLanguage)
                        .map((lang) => (
                          <option key={lang.code} value={lang.code}>
                            {lang.flag} {lang.name}
                          </option>
                        ))}
                    </select>
                  )}
                </div>
              </div>
            )}

            {currentSections.map((section) => (
              <Section
                key={section.id}
                section={section}
                onUpdate={updateSection}
                onDelete={deleteSection}
              />
            ))}

            <div className="flex justify-center pt-4">
              <Button
                onClick={addSection}
                variant="outline"
                className="flex items-center gap-2 text-gray-600 hover:text-gray-900 border-dashed border-2 px-6 py-3 bg-transparent"
              >
                <Plus className="w-4 h-4" />
                Add Section
              </Button>
            </div>
          </div>
        )}

        {!isPreviewMode && (
          <div className="flex justify-between items-center pt-6 border-t">
            <div className="text-sm text-gray-500">
              {currentSections.length} section
              {currentSections.length !== 1 ? "s" : ""} ‚Ä¢{" "}
              {calculateWordCount(currentSections)} words
              {languages.length > 1 && (
                <span className="ml-2">
                  ‚Ä¢ {languages.length} language
                  {languages.length !== 1 ? "s" : ""}
                </span>
              )}
            </div>
            <Button
              onClick={() => setIsPublishModalOpen(true)}
              className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700"
            >
              <Send className="w-4 h-4" />
              Publish Blog
            </Button>
          </div>
        )}

        <PublishModal
          isOpen={isPublishModalOpen}
          onClose={() => setIsPublishModalOpen(false)}
          onPublish={handlePublish}
          sections={currentSections}
          languages={languages}
        />

        <LanguageManager
          isOpen={showLanguageManager}
          onClose={() => setShowLanguageManager(false)}
          languages={languages}
          currentLanguage={currentLanguage}
          onAddLanguage={addLanguageVersion}
          onUpdateLanguage={updateLanguageVersion}
          onDeleteLanguage={deleteLanguageVersion}
          onSwitchLanguage={setCurrentLanguage}
        />
      </div>
    </div>
  );
}
